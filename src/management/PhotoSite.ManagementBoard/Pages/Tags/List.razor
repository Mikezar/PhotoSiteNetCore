@page "/tags" 

@using PhotoSite.ManagementBoard.Services.Abstract
@using PhotoSite.WebApi.Photo

@inject ITagService TagService

<ResultBlock @ref="ResultBlock" />

<div class="container">
    <button class="btn btn-primary mb-2 mt-1" @onclick="(() => EditTagAsync(null))">Add a new tag</button>

    <table class="table table-hover space">
        <thead>
            <tr>
                <th>#</th>
                <th>Title</th>
                <th>Photo count</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tag in TagList)
            {
                <tr>
                    <td>@tag.Id</td>
                    <td>@tag.Title</td>
                    <td>@tag.PhotoCount</td>
                    <td style="text-align: right">
                        <span class="material-icons" style="color:green; cursor: pointer" @onclick="(() => EditTagAsync(tag))">create</span>
                        <span class="material-icons" style="color:red; cursor: pointer" @onclick="(() => DeleteTagAsync(tag.Id))">delete_forever</span>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private IList<TagExtensionDto> TagList { get; set; } = new List<TagExtensionDto>();

    [CascadingParameter]
    public IModalService Modal { get; set; }

    public ResultBlock ResultBlock { get; set; }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadDataAsync();
        }
    }

    async Task LoadDataAsync()
    {
        var result = await ResultBlock.LoadAsync(() => TagService.GetAllTagsAsync());

        if (result.IsSuccess)
        {
            TagList = result.Result;

            StateHasChanged();
        }
    }

    async Task EditTagAsync(TagDto tagDto)
    {
        var parameters = new ModalParameters();

        parameters.Add("TagModel", tagDto);

        var modal = Modal.Show<EditTag>("Tag edit", parameters, new ModalOptions
        {
            Animation = ModalAnimation.FadeInOut(0.5)
        });

        var result = await modal.Result;

        if (!result.Cancelled)
        {
            await LoadDataAsync();
        }
    }

    async Task DeleteTagAsync(int tagId)
    {
        await ResultBlock.LoadAsync(() => TagService.DeleteTagAsync(tagId));
        StateHasChanged();
    }
}
