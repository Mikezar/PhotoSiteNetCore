@page "/ips"

@using PhotoSite.ManagementBoard.Services.Abstract
@using PhotoSite.WebApi.Admin

@inject IBlackIpService BlackIpService

<ResultBlock @ref="ResultBlock" />

<div class="container">
    @*<button class="btn btn-primary mb-2 mt-1" @onclick="(() => EditTagAsync(null))">Add a new tag</button>*@

    <table class="table table-hover space">
        <thead>
            <tr>
                <th>#</th>
                <th>Mask address</th>
                <th>Subnet mask</th>
                <th>IsInterNetworkV6</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var blackIp in BlackIpList)
            {
            <tr>
                <td>@blackIp.Id</td>
                <td>@blackIp.MaskAddress</td>
                <td>@blackIp.SubnetMask</td>
                <td>@blackIp.IsInterNetworkV6</td>
                <td style="text-align: right">
                    @*<span class="material-icons" style="color:green; cursor: pointer" @onclick="(() => EditTagAsync(tag))">create</span>
                    <span class="material-icons" style="color:red; cursor: pointer" @onclick="(() => DeleteTagAsync(tag.Id))">delete_forever</span>*@
                </td>
            </tr>
            }
        </tbody>
    </table>
</div>

@code {

    private IList<BlackIpDto> BlackIpList { get; set; } = new List<BlackIpDto>();

    public ResultBlock ResultBlock { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadDataAsync();
        }
    }

    async Task LoadDataAsync()
    {
        var result = await ResultBlock.LoadAsync(() => BlackIpService.GetAllIpsAsync());

        if (result.IsSuccess)
        {
            BlackIpList = result.Result;

            StateHasChanged();
        }
    }
}
